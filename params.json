{"name":"Noderpt","tagline":"","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"Node Report Server (MySQL only now!)\r\n=======\r\nSimple MySQL DB SQL to JSON mapping module, and also provide web function to render table.\r\n\r\n# Installation\r\n```bash\r\nnpm install noderpt\r\n```\r\n\r\n# Useage\r\nThree steps to build the report...\r\n## Step1: Config the DB and SQL mapping file\r\nThe database config file's path need to export to environment and the config will like:\r\n```json\r\n{\r\n  \"host\": \"database.ip.address\",\r\n  \"port\": 3306,\r\n  \"user\": \"dbuser\",\r\n  \"password\": \"dbpassword\",\r\n  \"database\": \"dbname\"\r\n}\r\n```\r\nYou need to create a config file inside your project, in our sample we create the report config in $project/report.\r\n\r\nYou can use json format config\r\n```json\r\n{\r\n  \"name\": \"queryUserInfo\",\r\n  \"sql\" : \"select * from user where 1=1 \",\r\n  \"conditions\": [\r\n    {\"field\":\"USERNAME\", \"condition\":\"and username = ?\"},\r\n    {\"field\":\"USER_ID\", \"condition\":\"and user_id = ?\"}\r\n  ]\r\n}\r\n```\r\nOr using xml format config\r\n```xml\r\n<config>\r\n  <name>queryUserInfo</name>\r\n  <sql>select * from user where 1=1</sql>\r\n  <conditions>\r\n    <field>USERNAME</field> <condition>and username = ?</condition>\r\n  </conditions>\r\n  <conditions>\r\n    <field>USER_ID</field> <condition>and user_id = ?</condition>\r\n  </conditions>\r\n</config>\r\n```\r\n## Step2: Load report router in app.js\r\nCreate the express project and edit the app.js file.\r\n\r\nBuild the app.js for web start using express:\r\n```js\r\nvar express = require('express')\r\n  , routes = require('./routes')\r\n  , http = require('http')\r\n  , path = require('path')\r\n  , log = require('nodeutil').logger.getInstance()\r\n  , rpt = require('noderpt');\r\n  \r\nvar app = express();\r\n\r\nrpt.setup(app, {\r\n  dbCfgFile: '/root/project/report/lib/.database.cfg',\r\n  rptConfigPath: '/root/project/report/report/',\r\n  reportRoot:'/report/rest',\r\n  reportDoc: '/report/restdoc'\r\n});\r\n\r\napp.configure(function(){\r\n  app.set('port', process.env.PORT || 8080);\r\n  app.set('views', __dirname + '/views');\r\n  app.set('view engine', 'jade');\r\n  app.use(express.favicon());\r\n  app.use(express.logger('dev'));\r\n  app.use(express.bodyParser());\r\n  app.use(express.methodOverride());\r\n  app.use(app.router);\r\n  app.use(express.static(path.join(__dirname, 'public')));\r\n});\r\n\r\napp.configure('development', function(){\r\n  app.use(express.errorHandler());\r\n});\r\n\r\napp.get('/', routes.index);\r\n\r\nrptRouter.setup(app, {\r\n    dbCfgFile: '/root/project/report/lib/.database.cfg', //Database connection info\r\n    rptConfigPath: '/root/project/report/report/', //report configure files\r\n    reportRoot:'/report/rest',\r\n    reportDoc: '/report/restdoc'\r\n});\r\n\r\n\r\nhttp.createServer(app).listen(app.get('port'), function(){\r\n  log.debug(\"Express server listening on port \" + app.get('port'));\r\n});\r\n```\r\nThe main block we need to add, only:\r\n```js\r\nvar rpt = require('noderpt');\r\nrpt.setup(app, {\r\n    dbCfgFile: '/root/project/report/lib/.database.cfg',\r\n    rptConfigPath: '/root/project/report/report/',\r\n    reportRoot:'/report/rest',\r\n    reportDoc: '/report/restdoc'\r\n});\r\n```\r\nThe rptRouter.setup help for setup the REST route url prefix (/report/rest) and the document page route (/report/restdoc).\r\n\r\n\r\n## Step3: Using report.js to render in the html page\r\nWe create a test.html in the $project/public folder, that is the default folder for express static resource. \r\nAnd in our sample, your need to download the jquery.js for build the page\r\nEdit the html page:\r\n```html\r\n<html>\r\n<head>\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/javascripts/jquery.js\"></script>\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/report.js\"></script>\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/underscore-min.js\"></script>\r\n<script type=\"text/javascript\" language=\"javascript\" src=\"/json-to-table.js\"></script>\r\n\r\n<script>\r\n$(document).ready(function() {\r\n  $('#data').genReport(\r\n    '/report/rest',\r\n    'simple.rpt.xml', \r\n    {\"USERNAME\":\"SIMONSU\"},\r\n    [\"USERNAME\",\"USER_ID\"]);\r\n} );\r\n</script>\r\n</head>\r\n\r\n<body>\r\n<h1>TEST REPORT</h1>\r\n<div id=\"data\"> </div>\r\n</body>\r\n</html>\r\n```\r\n\r\n## Start the server\r\n```bash\r\n# cd $project\r\n# node app.js\r\n```\r\n\r\nIf the three steps are all OK, you can load report using REST:\r\n\r\nhttp://localhost:8080/report/rest/[Report Config File Name]?[queryKey=queryValue]\r\n```html\r\nex: http://localhost:8080/report/rest/simple.rpt?USER_ID=6666\r\n```\r\nPS: the path need to follow the configure in the app.js\r\n\r\nAnd the test page will be:\r\n```html\r\nhttp://localhost:8080/test.html\r\n```\r\n"}